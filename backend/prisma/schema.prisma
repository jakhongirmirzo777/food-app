model Category {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  imageUrl    String
  tagId       String?
  meals       Meal[]
  tag         Tag?     @relation(fields: [tagId], references: [id])
}

model Meal {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Int
  imageUrl    String
  categoryId  String
  category    Category? @relation(fields: [categoryId], references: [id])

  order     Order?      @relation(fields: [orderId], references: [id])
  orderId   Int?
  orderItem OrderItem[]

  isDeleted Boolean @default(false)
}

model Admins {
  id                 String @id @default(uuid())
  name               String
  login              String
  password           String
  role               Roles
  hashedRefreshToken String
}

model Order {
  id              Int         @id @default(autoincrement())
  totalCost       Int
  userPhoneNumber String
  address         String?
  status          OrderStatus
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now())
  meals           Meal[]
}

model OrderItem {
  id           String @id @default(uuid())
  mealId       String
  mealQuantity Int
  meal         Meal   @relation(fields: [mealId], references: [id])
  orderId      Int
  order        Order  @relation(fields: [orderId], references: [id])
}

model Tag {
  id         String     @id @default(uuid())
  title      String
  categories Category[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  REJECTED
  NEW
}

enum Roles {
  ADMIN
  SUPER_ADMIN
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
